{"version":3,"sources":["components/SpaceHeader/SpaceHeader.js","components/NavBar/NavBar.js","components/Sections/Sections.js","App.js","serviceWorker.js","index.js"],"names":["particleOptions","particles","number","value","density","enable","value_area","shape","stroke","width","color","type","line_linked","distance","opacity","move","direction","random","straight","speed","out_mode","size","anim","size_min","opacity_min","interactivity","events","onhover","mode","onclick","modes","grab","push","particles_nb","retina_detect","SpaceHeader","id","params","NavBar","class","className","activeClass","spy","to","smooth","duration","Sections","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iUAIMA,G,OAAkB,CACpBC,UAAW,CACPC,OAAQ,CACJC,MAAO,IACPC,QAAS,CACLC,QAAQ,EACRC,WAAY,OAGpBC,MAAO,CACHC,OAAQ,CACJC,MAAO,GACPC,MAAO,WAEXC,KAAM,QAEVC,YAAa,CACTP,QAAQ,EACRQ,SAAU,GACVC,QAAS,EACTL,MAAO,KAEXM,KAAM,CACFV,QAAQ,EACRW,UAAW,QACXC,QAAQ,EACRC,UAAU,EACVC,MAAO,IACPC,SAAU,OAEdC,KAAM,CACFC,KAAM,CACFH,MAAO,IACPI,SAAU,KAEdpB,MAAO,KACPc,QAAQ,GAEZH,QAAS,CACLQ,KAAM,CACFjB,QAAQ,EACRc,MAAO,KACPK,YAAa,IAEjBrB,MAAO,EACPc,QAAQ,IAIhBQ,cAAe,CACXC,OAAQ,CACJC,QAAS,CACLtB,QAAQ,EACRuB,KAAM,QAEVC,QAAS,CACLxB,QAAQ,EACRuB,KAAM,SAGdE,MAAO,CACHC,KAAM,CACFnB,YAAa,CACTE,QAAS,KAEbD,SAAU,IAEdmB,KAAM,CACFC,aAAc,KAI1BC,eAAgB,IAGH,SAASC,IACtB,OACI,6BACI,kBAAC,IAAD,CAAWC,GAAG,YACVC,OAAQrC,IACZ,yBAAKoC,GAAG,gBACJ,6CACA,yD,mBClFD,SAASE,IACpB,OACI,yBAAKC,MAAM,iBAAiBH,GAAG,UAC3B,kBAAC,OAAD,CAAMI,UAAU,MAAMC,YAAY,SAASC,KAAK,EAAMC,GAAG,eAAeC,QAAQ,EAAMC,SAAU,KAAhG,YAGA,kBAAC,OAAD,CAAML,UAAU,MAAMC,YAAY,SAASC,KAAK,EAAMC,GAAG,cAAcC,QAAQ,EAAMC,SAAU,KAA/F,mBAGA,kBAAC,OAAD,CAAML,UAAU,MAAMC,YAAY,SAASC,KAAK,EAAMC,GAAG,eAAeC,QAAQ,EAAMC,SAAU,KAAhG,YAGA,kBAAC,OAAD,CAAML,UAAU,MAAMC,YAAY,SAASC,KAAK,EAAMC,GAAG,aAAaC,QAAQ,EAAMC,SAAU,KAA9F,W,OCbG,SAASC,IACpB,OACI,0BAAMP,MAAM,QACR,6BAASA,MAAM,QAAQH,GAAG,gBACtB,wCACA,mDAEJ,6BAASG,MAAM,QAAQH,GAAG,eACtB,+CACA,gEAEJ,6BAASG,MAAM,QAAQH,GAAG,gBACtB,wCACA,yDAEJ,6BAASG,MAAM,QAAQH,GAAG,cACtB,sCACA,wD,ICEDW,E,uKAbP,OACI,yBAAKP,UAAU,OACX,yBAAKJ,GAAG,QAAR,qBACA,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,Y,GATFY,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.57adcb9a.chunk.js","sourcesContent":["import React from 'react'; \r\nimport Particles from 'react-particles-js';\r\nimport './SpaceHeader.css'; \r\n\r\nconst particleOptions = {\r\n    particles: {\r\n        number: {\r\n            value: 100,\r\n            density: {\r\n                enable: false,\r\n                value_area: 1500\r\n            }\r\n        },\r\n        shape: {\r\n            stroke: {\r\n                width: 0.8,\r\n                color: \"#45F0DF\"\r\n            },\r\n            type: \"star\"\r\n        },\r\n        line_linked: {\r\n            enable: false,\r\n            distance: 90,\r\n            opacity: 1,\r\n            width: 1.5\r\n        },\r\n        move: {\r\n            enable: true, \r\n            direction: \"right\",\r\n            random: true, \r\n            straight: true, \r\n            speed: 0.25,\r\n            out_mode: \"out\", \r\n        },\r\n        size: {\r\n            anim: {\r\n                speed: 100, \r\n                size_min: 0.03\r\n            },\r\n            value: 1.25,\r\n            random: true\r\n        },\r\n        opacity: {\r\n            anim: {\r\n                enable: true,\r\n                speed: 1.25,\r\n                opacity_min: 0.3\r\n            },\r\n            value: 1, \r\n            random: true\r\n\r\n        }\r\n    },\r\n    interactivity: {\r\n        events: {\r\n            onhover: {\r\n                enable: true, \r\n                mode: \"grab\"\r\n            },\r\n            onclick: {\r\n                enable: true,\r\n                mode: \"push\"\r\n            }\r\n        },\r\n        modes: {\r\n            grab: {\r\n                line_linked: {\r\n                    opacity: 0.85\r\n                },\r\n                distance: 90\r\n            },\r\n            push: {\r\n                particles_nb: 1\r\n            }\r\n        }\r\n    },\r\n    retina_detect : true\r\n  }\r\n\r\n  export default function SpaceHeader(){\r\n    return (\r\n        <div>\r\n            <Particles id=\"particles\"\r\n                params={particleOptions}  />\r\n            <div id=\"space-header\">\r\n                <h1>HI, UNIVERSE!</h1>\r\n                <p>I'm a software developer</p>\r\n            </div> \r\n        </div>\r\n    ); \r\n  }\r\n","import React from 'react'; \r\nimport {Link} from 'react-scroll'; \r\nimport './NavBar.css'; \r\n\r\nexport default function NavBar(){\r\n    return (\r\n        <div class=\"tabs-container\" id=\"navbar\">\r\n            <Link className='tab' activeClass=\"active\" spy={true} to=\"tab-about-me\" smooth={true} duration={1000}>\r\n                About Me\r\n            </Link>\r\n            <Link className='tab' activeClass=\"active\" spy={true} to=\"tab-work-xp\" smooth={true} duration={1000}>\r\n                Work Experience\r\n            </Link>\r\n            <Link className='tab' activeClass=\"active\" spy={true} to=\"tab-projects\" smooth={true} duration={1000}>\r\n                Projects\r\n            </Link>\r\n            <Link className='tab' activeClass=\"active\" spy={true} to=\"tab-resume\" smooth={true} duration={1000}>\r\n                Resume\r\n            </Link>\r\n        </div>\r\n    ); \r\n  }","import React from 'react'; \r\nimport './Sections.css'; \r\n\r\nexport default function Sections() {\r\n    return (\r\n        <main class=\"main\">\r\n            <section class=\"slide\" id=\"tab-about-me\">\r\n                <h1>About Me</h1>\r\n                <h3>something about me</h3>\r\n            </section>\r\n            <section class=\"slide\" id=\"tab-work-xp\">\r\n                <h1>Work Experience</h1>\r\n                <h3>something about work experience</h3>\r\n            </section>\r\n            <section class=\"slide\" id=\"tab-projects\">\r\n                <h1>Projects</h1>\r\n                <h3>something about projects</h3>\r\n            </section>\r\n            <section class=\"slide\" id=\"tab-resume\">\r\n                <h1>Resume</h1>\r\n                <h3>something about resume</h3>\r\n            </section>\r\n        </main>\r\n    ); \r\n    \r\n}","import React, {Component} from 'react';\nimport './App.css';\nimport SpaceHeader from './components/SpaceHeader/SpaceHeader';\nimport NavBar from './components/NavBar/NavBar'; \nimport Sections from './components/Sections/Sections'\n\nclass App extends Component {\n \n    render() {\n        return (\n            <div className=\"App\">\n                <div id=\"name\">SANDHYA VELUDANDI</div>\n                <div>\n                    <SpaceHeader />\n                    <NavBar />\n                    <Sections />\n                </div> \n            </div>\n        ); \n    }; \n};\n\nexport default App; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}